type Query {
    notifikasjoner: NotifikasjonerResultat!
    saker(
        first: Int,
        after: String,
        virksomhetsnummer: String!
    ): SakConnection!
    whoami: String
}
type SakConnection {
    edges: [SakEdge!]!
    pageInfo: PageInfo!
#    totaltAntall: Int
#    feilAltinn: Boolean!
}
type PageInfo {
    hasNextPage: Boolean!
    endCursor: String!
}
type SakEdge {
    node: Sak!
    cursor: String!
}
type Sak {
    virksomhet: Virksomhet!
    sisteStatus: Statusoppdatering!
#    kan eksponere som ett to eller tre felt. ikke med i f√∏rste omgang
#    statusoppdateringer: [Statusoppdatering!]!
#    notifikasjoner: [Notifikasjon!]!
#    notifikasjonerogstatusoppdateringer: [Notifikasjon | Statusoppdatering!]!
}
type Statusoppdatering {
    status: Status!
    tittel: String!
    lenke: String!
    tidspunkt: ISO8601DateTime!
}
union Status = PredefinertStatus | EgendefinertStatus
type PredefinertStatus {
    value: StatusEnum!
}
type EgendefinertStatus {
    value: String!
}
enum StatusEnum {
    MOTTATT
    UNDER_BEHANDLING
}
type NotifikasjonerResultat {
    notifikasjoner: [Notifikasjon!]!
    feilAltinn: Boolean!
    feilDigiSyfo: Boolean!
}
union Notifikasjon = Beskjed | Oppgave

scalar ISO8601DateTime

type Oppgave {
    brukerKlikk: BrukerKlikk!
    tilstand: OppgaveTilstand
    merkelapp: String!
    tekst: String!
    lenke: String!
    opprettetTidspunkt: ISO8601DateTime!
    id: ID!
    virksomhet: Virksomhet!
}

enum OppgaveTilstand {
    NY
    UTFOERT
}

type Beskjed {
    brukerKlikk: BrukerKlikk!
    merkelapp: String!
    tekst: String!
    lenke: String!
    opprettetTidspunkt: ISO8601DateTime!
    id: ID!
    virksomhet: Virksomhet!
}

type Virksomhet {
    virksomhetsnummer: String!
    navn: String!
}

type Mutation {
    notifikasjonKlikketPaa(id: ID!): NotifikasjonKlikketPaaResultat!
}

union NotifikasjonKlikketPaaResultat = BrukerKlikk | UgyldigId

type BrukerKlikk {
    id: ID!
    klikketPaa: Boolean!
}

type UgyldigId {
    feilmelding: String!
}

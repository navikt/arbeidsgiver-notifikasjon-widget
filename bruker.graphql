type Query {
    notifikasjoner: NotifikasjonerResultat!
    saker(
        virksomhetsnummer: String!
        offset: Int
        limit: Int
        tekstsoek: String
    ): SakerResultat!
    whoami: String
}

type SakerResultat {
    saker: [Sak!]!

    """
    Antall saker for gitt filter, men uavhengig av offset/limit.
    """
    totaltAntallSaker: Int!

    feilAltinn: Boolean!
}

type Sak {
    id: ID!
    virksomhet: Virksomhet!
    tittel: String!
    lenke: String!
    merkelapp: String!
    sisteStatus: SakStatus!
}
type SakStatus {
    type: SakStatusType!
    tekst: String!
    tidspunkt: ISO8601DateTime!
}
enum SakStatusType {
    MOTTATT
    UNDER_BEHANDLING
    FERDIG

}
type NotifikasjonerResultat {
    notifikasjoner: [Notifikasjon!]!
    feilAltinn: Boolean!
    feilDigiSyfo: Boolean!
}
union Notifikasjon = Beskjed | Oppgave

scalar ISO8601DateTime
scalar ISO8601Date

type Oppgave {
    brukerKlikk: BrukerKlikk!
    tilstand: OppgaveTilstand
    merkelapp: String!
    tekst: String!
    lenke: String!
    opprettetTidspunkt: ISO8601DateTime!
    utgaattTidspunkt: ISO8601DateTime
    frist: ISO8601Date
    id: ID!
    virksomhet: Virksomhet!
}

enum OppgaveTilstand {
    NY
    UTFOERT
    UTGAATT
}

type Beskjed {
    brukerKlikk: BrukerKlikk!
    merkelapp: String!
    tekst: String!
    lenke: String!
    opprettetTidspunkt: ISO8601DateTime!
    id: ID!
    virksomhet: Virksomhet!
}

type Virksomhet {
    virksomhetsnummer: String!
    navn: String!
}

type Mutation {
    notifikasjonKlikketPaa(id: ID!): NotifikasjonKlikketPaaResultat!
}

union NotifikasjonKlikketPaaResultat = BrukerKlikk | UgyldigId

type BrukerKlikk {
    id: ID!
    klikketPaa: Boolean!
}

type UgyldigId {
    feilmelding: String!
}
